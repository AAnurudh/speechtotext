{
  "version": 3,
  "sources": ["../../resumablejs/resumable.js"],
  "sourcesContent": ["/*\n* MIT Licensed\n* http://www.23developer.com/opensource\n* http://github.com/23/resumable.js\n* Steffen Tiedemann Christensen, steffen@23company.com\n*/\n\n(function(){\n\"use strict\";\n\n  var Resumable = function(opts){\n    if ( !(this instanceof Resumable) ) {\n      return new Resumable(opts);\n    }\n    this.version = 1.0;\n    // SUPPORTED BY BROWSER?\n    // Check if these features are support by the browser:\n    // - File object type\n    // - Blob object type\n    // - FileList object type\n    // - slicing files\n    this.support = (\n                   (typeof(File)!=='undefined')\n                   &&\n                   (typeof(Blob)!=='undefined')\n                   &&\n                   (typeof(FileList)!=='undefined')\n                   &&\n                   (!!Blob.prototype.webkitSlice||!!Blob.prototype.mozSlice||!!Blob.prototype.slice||false)\n                   );\n    if(!this.support) return(false);\n\n\n    // PROPERTIES\n    var $ = this;\n    $.files = [];\n    $.defaults = {\n      chunkSize:1*1024*1024,\n      forceChunkSize:false,\n      simultaneousUploads:3,\n      fileParameterName:'file',\n      chunkNumberParameterName: 'resumableChunkNumber',\n      chunkSizeParameterName: 'resumableChunkSize',\n      currentChunkSizeParameterName: 'resumableCurrentChunkSize',\n      totalSizeParameterName: 'resumableTotalSize',\n      typeParameterName: 'resumableType',\n      identifierParameterName: 'resumableIdentifier',\n      fileNameParameterName: 'resumableFilename',\n      relativePathParameterName: 'resumableRelativePath',\n      totalChunksParameterName: 'resumableTotalChunks',\n      throttleProgressCallbacks: 0.5,\n      query:{},\n      headers:{},\n      preprocess:null,\n      method:'multipart',\n      uploadMethod: 'POST',\n      testMethod: 'GET',\n      prioritizeFirstAndLastChunk:false,\n      target:'/',\n      testTarget: null,\n      parameterNamespace:'',\n      testChunks:true,\n      generateUniqueIdentifier:null,\n      getTarget:null,\n      maxChunkRetries:100,\n      chunkRetryInterval:undefined,\n      permanentErrors:[400, 404, 415, 500, 501],\n      maxFiles:undefined,\n      withCredentials:false,\n      xhrTimeout:0,\n      clearInput:true,\n      chunkFormat:'blob',\n      setChunkTypeFromFile:false,\n      maxFilesErrorCallback:function (files, errorCount) {\n        var maxFiles = $.getOpt('maxFiles');\n        alert('Please upload no more than ' + maxFiles + ' file' + (maxFiles === 1 ? '' : 's') + ' at a time.');\n      },\n      minFileSize:1,\n      minFileSizeErrorCallback:function(file, errorCount) {\n        alert(file.fileName||file.name +' is too small, please upload files larger than ' + $h.formatSize($.getOpt('minFileSize')) + '.');\n      },\n      maxFileSize:undefined,\n      maxFileSizeErrorCallback:function(file, errorCount) {\n        alert(file.fileName||file.name +' is too large, please upload files less than ' + $h.formatSize($.getOpt('maxFileSize')) + '.');\n      },\n      fileType: [],\n      fileTypeErrorCallback: function(file, errorCount) {\n        alert(file.fileName||file.name +' has type not allowed, please upload files of type ' + $.getOpt('fileType') + '.');\n      }\n    };\n    $.opts = opts||{};\n    $.getOpt = function(o) {\n      var $opt = this;\n      // Get multiple option if passed an array\n      if(o instanceof Array) {\n        var options = {};\n        $h.each(o, function(option){\n          options[option] = $opt.getOpt(option);\n        });\n        return options;\n      }\n      // Otherwise, just return a simple option\n      if ($opt instanceof ResumableChunk) {\n        if (typeof $opt.opts[o] !== 'undefined') { return $opt.opts[o]; }\n        else { $opt = $opt.fileObj; }\n      }\n      if ($opt instanceof ResumableFile) {\n        if (typeof $opt.opts[o] !== 'undefined') { return $opt.opts[o]; }\n        else { $opt = $opt.resumableObj; }\n      }\n      if ($opt instanceof Resumable) {\n        if (typeof $opt.opts[o] !== 'undefined') { return $opt.opts[o]; }\n        else { return $opt.defaults[o]; }\n      }\n    };\n\n    // EVENTS\n    // catchAll(event, ...)\n    // fileSuccess(file), fileProgress(file), fileAdded(file, event), filesAdded(files, filesSkipped), fileRetry(file),\n    // fileError(file, message), complete(), progress(), error(message, file), pause()\n    $.events = [];\n    $.on = function(event,callback){\n      $.events.push(event.toLowerCase(), callback);\n    };\n    $.fire = function(){\n      // `arguments` is an object, not array, in FF, so:\n      var args = [];\n      for (var i=0; i<arguments.length; i++) args.push(arguments[i]);\n      // Find event listeners, and support pseudo-event `catchAll`\n      var event = args[0].toLowerCase();\n      for (var i=0; i<=$.events.length; i+=2) {\n        if($.events[i]==event) $.events[i+1].apply($,args.slice(1));\n        if($.events[i]=='catchall') $.events[i+1].apply(null,args);\n      }\n      if(event=='fileerror') $.fire('error', args[2], args[1]);\n      if(event=='fileprogress') $.fire('progress');\n    };\n\n\n    // INTERNAL HELPER METHODS (handy, but ultimately not part of uploading)\n    var $h = {\n      stopEvent: function(e){\n        e.stopPropagation();\n        e.preventDefault();\n      },\n      each: function(o,callback){\n        if(typeof(o.length)!=='undefined') {\n          for (var i=0; i<o.length; i++) {\n            // Array or FileList\n            if(callback(o[i])===false) return;\n          }\n        } else {\n          for (i in o) {\n            // Object\n            if(callback(i,o[i])===false) return;\n          }\n        }\n      },\n      generateUniqueIdentifier:function(file, event){\n        var custom = $.getOpt('generateUniqueIdentifier');\n        if(typeof custom === 'function') {\n          return custom(file, event);\n        }\n        var relativePath = file.webkitRelativePath||file.fileName||file.name; // Some confusion in different versions of Firefox\n        var size = file.size;\n        return(size + '-' + relativePath.replace(/[^0-9a-zA-Z_-]/img, ''));\n      },\n      contains:function(array,test) {\n        var result = false;\n\n        $h.each(array, function(value) {\n          if (value == test) {\n            result = true;\n            return false;\n          }\n          return true;\n        });\n\n        return result;\n      },\n      formatSize:function(size){\n        if(size<1024) {\n          return size + ' bytes';\n        } else if(size<1024*1024) {\n          return (size/1024.0).toFixed(0) + ' KB';\n        } else if(size<1024*1024*1024) {\n          return (size/1024.0/1024.0).toFixed(1) + ' MB';\n        } else {\n          return (size/1024.0/1024.0/1024.0).toFixed(1) + ' GB';\n        }\n      },\n      getTarget:function(request, params){\n        var target = $.getOpt('target');\n\n        if (request === 'test' && $.getOpt('testTarget')) {\n          target = $.getOpt('testTarget') === '/' ? $.getOpt('target') : $.getOpt('testTarget');\n        }\n\n        if (typeof target === 'function') {\n          return target(params);\n        }\n\n        var separator = target.indexOf('?') < 0 ? '?' : '&';\n        var joinedParams = params.join('&');\n\n        return target + separator + joinedParams;\n      }\n    };\n\n    var onDrop = function(event){\n      $h.stopEvent(event);\n\n      //handle dropped things as items if we can (this lets us deal with folders nicer in some cases)\n      if (event.dataTransfer && event.dataTransfer.items) {\n        loadFiles(event.dataTransfer.items, event);\n      }\n      //else handle them as files\n      else if (event.dataTransfer && event.dataTransfer.files) {\n        loadFiles(event.dataTransfer.files, event);\n      }\n    };\n    var preventDefault = function(e) {\n      e.preventDefault();\n    };\n\n    /**\n     * processes a single upload item (file or directory)\n     * @param {Object} item item to upload, may be file or directory entry\n     * @param {string} path current file path\n     * @param {File[]} items list of files to append new items to\n     * @param {Function} cb callback invoked when item is processed\n     */\n    function processItem(item, path, items, cb) {\n      var entry;\n      if(item.isFile){\n        // file provided\n        return item.file(function(file){\n          file.relativePath = path + file.name;\n          items.push(file);\n          cb();\n        });\n      }else if(item.isDirectory){\n        // item is already a directory entry, just assign\n        entry = item;\n      }else if(item instanceof File) {\n        items.push(item);\n      }\n      if('function' === typeof item.webkitGetAsEntry){\n        // get entry from file object\n        entry = item.webkitGetAsEntry();\n      }\n      if(entry && entry.isDirectory){\n        // directory provided, process it\n        return processDirectory(entry, path + entry.name + '/', items, cb);\n      }\n      if('function' === typeof item.getAsFile){\n        // item represents a File object, convert it\n        item = item.getAsFile();\n        if(item instanceof File) {\n          item.relativePath = path + item.name;\n          items.push(item);\n        }\n      }\n      cb(); // indicate processing is done\n    }\n\n\n    /**\n     * cps-style list iteration.\n     * invokes all functions in list and waits for their callback to be\n     * triggered.\n     * @param  {Function[]}   items list of functions expecting callback parameter\n     * @param  {Function} cb    callback to trigger after the last callback has been invoked\n     */\n    function processCallbacks(items, cb){\n      if(!items || items.length === 0){\n        // empty or no list, invoke callback\n        return cb();\n      }\n      // invoke current function, pass the next part as continuation\n      items[0](function(){\n        processCallbacks(items.slice(1), cb);\n      });\n    }\n\n    /**\n     * recursively traverse directory and collect files to upload\n     * @param  {Object}   directory directory to process\n     * @param  {string}   path      current path\n     * @param  {File[]}   items     target list of items\n     * @param  {Function} cb        callback invoked after traversing directory\n     */\n    function processDirectory (directory, path, items, cb) {\n      var dirReader = directory.createReader();\n      dirReader.readEntries(function(entries){\n        if(!entries.length){\n          // empty directory, skip\n          return cb();\n        }\n        // process all conversion callbacks, finally invoke own one\n        processCallbacks(\n          entries.map(function(entry){\n            // bind all properties except for callback\n            return processItem.bind(null, entry, path, items);\n          }),\n          cb\n        );\n      });\n    }\n\n    /**\n     * process items to extract files to be uploaded\n     * @param  {File[]} items items to process\n     * @param  {Event} event event that led to upload\n     */\n    function loadFiles(items, event) {\n      if(!items.length){\n        return; // nothing to do\n      }\n      $.fire('beforeAdd');\n      var files = [];\n      processCallbacks(\n          Array.prototype.map.call(items, function(item){\n            // bind all properties except for callback\n            return processItem.bind(null, item, \"\", files);\n          }),\n          function(){\n            if(files.length){\n              // at least one file found\n              appendFilesFromFileList(files, event);\n            }\n          }\n      );\n    };\n\n    var appendFilesFromFileList = function(fileList, event){\n      // check for uploading too many files\n      var errorCount = 0;\n      var o = $.getOpt(['maxFiles', 'minFileSize', 'maxFileSize', 'maxFilesErrorCallback', 'minFileSizeErrorCallback', 'maxFileSizeErrorCallback', 'fileType', 'fileTypeErrorCallback']);\n      if (typeof(o.maxFiles)!=='undefined' && o.maxFiles<(fileList.length+$.files.length)) {\n        // if single-file upload, file is already added, and trying to add 1 new file, simply replace the already-added file\n        if (o.maxFiles===1 && $.files.length===1 && fileList.length===1) {\n          $.removeFile($.files[0]);\n        } else {\n          o.maxFilesErrorCallback(fileList, errorCount++);\n          return false;\n        }\n      }\n      var files = [], filesSkipped = [], remaining = fileList.length;\n      var decreaseReamining = function(){\n        if(!--remaining){\n          // all files processed, trigger event\n          if(!files.length && !filesSkipped.length){\n            // no succeeded files, just skip\n            return;\n          }\n          window.setTimeout(function(){\n            $.fire('filesAdded', files, filesSkipped);\n          },0);\n        }\n      };\n      $h.each(fileList, function(file){\n        var fileName = file.name;\n        if(o.fileType.length > 0){\n          var fileTypeFound = false;\n          for(var index in o.fileType){\n            var extension = '.' + o.fileType[index];\n\t\t\tif(fileName.toLowerCase().indexOf(extension.toLowerCase(), fileName.length - extension.length) !== -1){\n              fileTypeFound = true;\n              break;\n            }\n          }\n          if (!fileTypeFound) {\n            o.fileTypeErrorCallback(file, errorCount++);\n            return false;\n          }\n        }\n\n        if (typeof(o.minFileSize)!=='undefined' && file.size<o.minFileSize) {\n          o.minFileSizeErrorCallback(file, errorCount++);\n          return false;\n        }\n        if (typeof(o.maxFileSize)!=='undefined' && file.size>o.maxFileSize) {\n          o.maxFileSizeErrorCallback(file, errorCount++);\n          return false;\n        }\n\n        function addFile(uniqueIdentifier){\n          if (!$.getFromUniqueIdentifier(uniqueIdentifier)) {(function(){\n            file.uniqueIdentifier = uniqueIdentifier;\n            var f = new ResumableFile($, file, uniqueIdentifier);\n            $.files.push(f);\n            files.push(f);\n            f.container = (typeof event != 'undefined' ? event.srcElement : null);\n            window.setTimeout(function(){\n              $.fire('fileAdded', f, event)\n            },0);\n          })()} else {\n            filesSkipped.push(file);\n          };\n          decreaseReamining();\n        }\n        // directories have size == 0\n        var uniqueIdentifier = $h.generateUniqueIdentifier(file, event);\n        if(uniqueIdentifier && typeof uniqueIdentifier.then === 'function'){\n          // Promise or Promise-like object provided as unique identifier\n          uniqueIdentifier\n          .then(\n            function(uniqueIdentifier){\n              // unique identifier generation succeeded\n              addFile(uniqueIdentifier);\n            },\n           function(){\n              // unique identifier generation failed\n              // skip further processing, only decrease file count\n              decreaseReamining();\n            }\n          );\n        }else{\n          // non-Promise provided as unique identifier, process synchronously\n          addFile(uniqueIdentifier);\n        }\n      });\n    };\n\n    // INTERNAL OBJECT TYPES\n    function ResumableFile(resumableObj, file, uniqueIdentifier){\n      var $ = this;\n      $.opts = {};\n      $.getOpt = resumableObj.getOpt;\n      $._prevProgress = 0;\n      $.resumableObj = resumableObj;\n      $.file = file;\n      $.fileName = file.fileName||file.name; // Some confusion in different versions of Firefox\n      $.size = file.size;\n      $.relativePath = file.relativePath || file.webkitRelativePath || $.fileName;\n      $.uniqueIdentifier = uniqueIdentifier;\n      $._pause = false;\n      $.container = '';\n      var _error = uniqueIdentifier !== undefined;\n\n      // Callback when something happens within the chunk\n      var chunkEvent = function(event, message){\n        // event can be 'progress', 'success', 'error' or 'retry'\n        switch(event){\n        case 'progress':\n          $.resumableObj.fire('fileProgress', $, message);\n          break;\n        case 'error':\n          $.abort();\n          _error = true;\n          $.chunks = [];\n          $.resumableObj.fire('fileError', $, message);\n          break;\n        case 'success':\n          if(_error) return;\n          $.resumableObj.fire('fileProgress', $); // it's at least progress\n          if($.isComplete()) {\n            $.resumableObj.fire('fileSuccess', $, message);\n          }\n          break;\n        case 'retry':\n          $.resumableObj.fire('fileRetry', $);\n          break;\n        }\n      };\n\n      // Main code to set up a file object with chunks,\n      // packaged to be able to handle retries if needed.\n      $.chunks = [];\n      $.abort = function(){\n        // Stop current uploads\n        var abortCount = 0;\n        $h.each($.chunks, function(c){\n          if(c.status()=='uploading') {\n            c.abort();\n            abortCount++;\n          }\n        });\n        if(abortCount>0) $.resumableObj.fire('fileProgress', $);\n      };\n      $.cancel = function(){\n        // Reset this file to be void\n        var _chunks = $.chunks;\n        $.chunks = [];\n        // Stop current uploads\n        $h.each(_chunks, function(c){\n          if(c.status()=='uploading')  {\n            c.abort();\n            $.resumableObj.uploadNextChunk();\n          }\n        });\n        $.resumableObj.removeFile($);\n        $.resumableObj.fire('fileProgress', $);\n      };\n      $.retry = function(){\n        $.bootstrap();\n        var firedRetry = false;\n        $.resumableObj.on('chunkingComplete', function(){\n          if(!firedRetry) $.resumableObj.upload();\n          firedRetry = true;\n        });\n      };\n      $.bootstrap = function(){\n        $.abort();\n        _error = false;\n        // Rebuild stack of chunks from file\n        $.chunks = [];\n        $._prevProgress = 0;\n        var round = $.getOpt('forceChunkSize') ? Math.ceil : Math.floor;\n        var maxOffset = Math.max(round($.file.size/$.getOpt('chunkSize')),1);\n        for (var offset=0; offset<maxOffset; offset++) {(function(offset){\n            window.setTimeout(function(){\n                $.chunks.push(new ResumableChunk($.resumableObj, $, offset, chunkEvent));\n                $.resumableObj.fire('chunkingProgress',$,offset/maxOffset);\n            },0);\n        })(offset)}\n        window.setTimeout(function(){\n            $.resumableObj.fire('chunkingComplete',$);\n        },0);\n      };\n      $.progress = function(){\n        if(_error) return(1);\n        // Sum up progress across everything\n        var ret = 0;\n        var error = false;\n        $h.each($.chunks, function(c){\n          if(c.status()=='error') error = true;\n          ret += c.progress(true); // get chunk progress relative to entire file\n        });\n        ret = (error ? 1 : (ret>0.99999 ? 1 : ret));\n        ret = Math.max($._prevProgress, ret); // We don't want to lose percentages when an upload is paused\n        $._prevProgress = ret;\n        return(ret);\n      };\n      $.isUploading = function(){\n        var uploading = false;\n        $h.each($.chunks, function(chunk){\n          if(chunk.status()=='uploading') {\n            uploading = true;\n            return(false);\n          }\n        });\n        return(uploading);\n      };\n      $.isComplete = function(){\n        var outstanding = false;\n        $h.each($.chunks, function(chunk){\n          var status = chunk.status();\n          if(status=='pending' || status=='uploading' || chunk.preprocessState === 1) {\n            outstanding = true;\n            return(false);\n          }\n        });\n        return(!outstanding);\n      };\n      $.pause = function(pause){\n          if(typeof(pause)==='undefined'){\n              $._pause = ($._pause ? false : true);\n          }else{\n              $._pause = pause;\n          }\n      };\n      $.isPaused = function() {\n        return $._pause;\n      };\n\n\n      // Bootstrap and return\n      $.resumableObj.fire('chunkingStart', $);\n      $.bootstrap();\n      return(this);\n    }\n\n\n    function ResumableChunk(resumableObj, fileObj, offset, callback){\n      var $ = this;\n      $.opts = {};\n      $.getOpt = resumableObj.getOpt;\n      $.resumableObj = resumableObj;\n      $.fileObj = fileObj;\n      $.fileObjSize = fileObj.size;\n      $.fileObjType = fileObj.file.type;\n      $.offset = offset;\n      $.callback = callback;\n      $.lastProgressCallback = (new Date);\n      $.tested = false;\n      $.retries = 0;\n      $.pendingRetry = false;\n      $.preprocessState = 0; // 0 = unprocessed, 1 = processing, 2 = finished\n\n      // Computed properties\n      var chunkSize = $.getOpt('chunkSize');\n      $.loaded = 0;\n      $.startByte = $.offset*chunkSize;\n      $.endByte = Math.min($.fileObjSize, ($.offset+1)*chunkSize);\n      if ($.fileObjSize-$.endByte < chunkSize && !$.getOpt('forceChunkSize')) {\n        // The last chunk will be bigger than the chunk size, but less than 2*chunkSize\n        $.endByte = $.fileObjSize;\n      }\n      $.xhr = null;\n\n      // test() makes a GET request without any data to see if the chunk has already been uploaded in a previous session\n      $.test = function(){\n        // Set up request and listen for event\n        $.xhr = new XMLHttpRequest();\n\n        var testHandler = function(e){\n          $.tested = true;\n          var status = $.status();\n          if(status=='success') {\n            $.callback(status, $.message());\n            $.resumableObj.uploadNextChunk();\n          } else {\n            $.send();\n          }\n        };\n        $.xhr.addEventListener('load', testHandler, false);\n        $.xhr.addEventListener('error', testHandler, false);\n        $.xhr.addEventListener('timeout', testHandler, false);\n\n        // Add data from the query options\n        var params = [];\n        var parameterNamespace = $.getOpt('parameterNamespace');\n        var customQuery = $.getOpt('query');\n        if(typeof customQuery == 'function') customQuery = customQuery($.fileObj, $);\n        $h.each(customQuery, function(k,v){\n          params.push([encodeURIComponent(parameterNamespace+k), encodeURIComponent(v)].join('='));\n        });\n        // Add extra data to identify chunk\n        params = params.concat(\n          [\n            // define key/value pairs for additional parameters\n            ['chunkNumberParameterName', $.offset + 1],\n            ['chunkSizeParameterName', $.getOpt('chunkSize')],\n            ['currentChunkSizeParameterName', $.endByte - $.startByte],\n            ['totalSizeParameterName', $.fileObjSize],\n            ['typeParameterName', $.fileObjType],\n            ['identifierParameterName', $.fileObj.uniqueIdentifier],\n            ['fileNameParameterName', $.fileObj.fileName],\n            ['relativePathParameterName', $.fileObj.relativePath],\n            ['totalChunksParameterName', $.fileObj.chunks.length]\n          ].filter(function(pair){\n            // include items that resolve to truthy values\n            // i.e. exclude false, null, undefined and empty strings\n            return $.getOpt(pair[0]);\n          })\n          .map(function(pair){\n            // map each key/value pair to its final form\n            return [\n              parameterNamespace + $.getOpt(pair[0]),\n              encodeURIComponent(pair[1])\n            ].join('=');\n          })\n        );\n        // Append the relevant chunk and send it\n        $.xhr.open($.getOpt('testMethod'), $h.getTarget('test', params));\n        $.xhr.timeout = $.getOpt('xhrTimeout');\n        $.xhr.withCredentials = $.getOpt('withCredentials');\n        // Add data from header options\n        var customHeaders = $.getOpt('headers');\n        if(typeof customHeaders === 'function') {\n          customHeaders = customHeaders($.fileObj, $);\n        }\n        $h.each(customHeaders, function(k,v) {\n          $.xhr.setRequestHeader(k, v);\n        });\n        $.xhr.send(null);\n      };\n\n      $.preprocessFinished = function(){\n        $.preprocessState = 2;\n        $.send();\n      };\n\n      // send() uploads the actual data in a POST call\n      $.send = function(){\n        var preprocess = $.getOpt('preprocess');\n        if(typeof preprocess === 'function') {\n          switch($.preprocessState) {\n          case 0: $.preprocessState = 1; preprocess($); return;\n          case 1: return;\n          case 2: break;\n          }\n        }\n        if($.getOpt('testChunks') && !$.tested) {\n          $.test();\n          return;\n        }\n\n        // Set up request and listen for event\n        $.xhr = new XMLHttpRequest();\n\n        // Progress\n        $.xhr.upload.addEventListener('progress', function(e){\n          if( (new Date) - $.lastProgressCallback > $.getOpt('throttleProgressCallbacks') * 1000 ) {\n            $.callback('progress');\n            $.lastProgressCallback = (new Date);\n          }\n          $.loaded=e.loaded||0;\n        }, false);\n        $.loaded = 0;\n        $.pendingRetry = false;\n        $.callback('progress');\n\n        // Done (either done, failed or retry)\n        var doneHandler = function(e){\n          var status = $.status();\n          if(status=='success'||status=='error') {\n            $.callback(status, $.message());\n            $.resumableObj.uploadNextChunk();\n          } else {\n            $.callback('retry', $.message());\n            $.abort();\n            $.retries++;\n            var retryInterval = $.getOpt('chunkRetryInterval');\n            if(retryInterval !== undefined) {\n              $.pendingRetry = true;\n              setTimeout($.send, retryInterval);\n            } else {\n              $.send();\n            }\n          }\n        };\n        $.xhr.addEventListener('load', doneHandler, false);\n        $.xhr.addEventListener('error', doneHandler, false);\n        $.xhr.addEventListener('timeout', doneHandler, false);\n\n        // Set up the basic query data from Resumable\n        var query = [\n          ['chunkNumberParameterName', $.offset + 1],\n          ['chunkSizeParameterName', $.getOpt('chunkSize')],\n          ['currentChunkSizeParameterName', $.endByte - $.startByte],\n          ['totalSizeParameterName', $.fileObjSize],\n          ['typeParameterName', $.fileObjType],\n          ['identifierParameterName', $.fileObj.uniqueIdentifier],\n          ['fileNameParameterName', $.fileObj.fileName],\n          ['relativePathParameterName', $.fileObj.relativePath],\n          ['totalChunksParameterName', $.fileObj.chunks.length],\n        ].filter(function(pair){\n          // include items that resolve to truthy values\n          // i.e. exclude false, null, undefined and empty strings\n          return $.getOpt(pair[0]);\n        })\n        .reduce(function(query, pair){\n          // assign query key/value\n          query[$.getOpt(pair[0])] = pair[1];\n          return query;\n        }, {});\n        // Mix in custom data\n        var customQuery = $.getOpt('query');\n        if(typeof customQuery == 'function') customQuery = customQuery($.fileObj, $);\n        $h.each(customQuery, function(k,v){\n          query[k] = v;\n        });\n\n        var func = ($.fileObj.file.slice ? 'slice' : ($.fileObj.file.mozSlice ? 'mozSlice' : ($.fileObj.file.webkitSlice ? 'webkitSlice' : 'slice')));\n        var bytes = $.fileObj.file[func]($.startByte, $.endByte, $.getOpt('setChunkTypeFromFile') ? $.fileObj.file.type : \"\");\n        var data = null;\n        var params = [];\n\n        var parameterNamespace = $.getOpt('parameterNamespace');\n                if ($.getOpt('method') === 'octet') {\n                    // Add data from the query options\n                    data = bytes;\n                    $h.each(query, function (k, v) {\n                        params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\n                    });\n                } else {\n                    // Add data from the query options\n                    data = new FormData();\n                    $h.each(query, function (k, v) {\n                        data.append(parameterNamespace + k, v);\n                        params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\n                    });\n                    if ($.getOpt('chunkFormat') == 'blob') {\n                        data.append(parameterNamespace + $.getOpt('fileParameterName'), bytes, $.fileObj.fileName);\n                    }\n                    else if ($.getOpt('chunkFormat') == 'base64') {\n                        var fr = new FileReader();\n                        fr.onload = function (e) {\n                            data.append(parameterNamespace + $.getOpt('fileParameterName'), fr.result);\n                            $.xhr.send(data);\n                        }\n                        fr.readAsDataURL(bytes);\n                    }\n                }\n\n        var target = $h.getTarget('upload', params);\n        var method = $.getOpt('uploadMethod');\n\n        $.xhr.open(method, target);\n        if ($.getOpt('method') === 'octet') {\n          $.xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n        }\n        $.xhr.timeout = $.getOpt('xhrTimeout');\n        $.xhr.withCredentials = $.getOpt('withCredentials');\n        // Add data from header options\n        var customHeaders = $.getOpt('headers');\n        if(typeof customHeaders === 'function') {\n          customHeaders = customHeaders($.fileObj, $);\n        }\n\n        $h.each(customHeaders, function(k,v) {\n          $.xhr.setRequestHeader(k, v);\n        });\n\n                if ($.getOpt('chunkFormat') == 'blob') {\n                    $.xhr.send(data);\n                }\n      };\n      $.abort = function(){\n        // Abort and reset\n        if($.xhr) $.xhr.abort();\n        $.xhr = null;\n      };\n      $.status = function(){\n        // Returns: 'pending', 'uploading', 'success', 'error'\n        if($.pendingRetry) {\n          // if pending retry then that's effectively the same as actively uploading,\n          // there might just be a slight delay before the retry starts\n          return('uploading');\n        } else if(!$.xhr) {\n          return('pending');\n        } else if($.xhr.readyState<4) {\n          // Status is really 'OPENED', 'HEADERS_RECEIVED' or 'LOADING' - meaning that stuff is happening\n          return('uploading');\n        } else {\n          if($.xhr.status == 200 || $.xhr.status == 201) {\n            // HTTP 200, 201 (created)\n            return('success');\n          } else if($h.contains($.getOpt('permanentErrors'), $.xhr.status) || $.retries >= $.getOpt('maxChunkRetries')) {\n            // HTTP 415/500/501, permanent error\n            return('error');\n          } else {\n            // this should never happen, but we'll reset and queue a retry\n            // a likely case for this would be 503 service unavailable\n            $.abort();\n            return('pending');\n          }\n        }\n      };\n      $.message = function(){\n        return($.xhr ? $.xhr.responseText : '');\n      };\n      $.progress = function(relative){\n        if(typeof(relative)==='undefined') relative = false;\n        var factor = (relative ? ($.endByte-$.startByte)/$.fileObjSize : 1);\n        if($.pendingRetry) return(0);\n        if(!$.xhr || !$.xhr.status) factor*=.95;\n        var s = $.status();\n        switch(s){\n        case 'success':\n        case 'error':\n          return(1*factor);\n        case 'pending':\n          return(0*factor);\n        default:\n          return($.loaded/($.endByte-$.startByte)*factor);\n        }\n      };\n      return(this);\n    }\n\n    // QUEUE\n    $.uploadNextChunk = function(){\n      var found = false;\n\n      // In some cases (such as videos) it's really handy to upload the first\n      // and last chunk of a file quickly; this let's the server check the file's\n      // metadata and determine if there's even a point in continuing.\n      if ($.getOpt('prioritizeFirstAndLastChunk')) {\n        $h.each($.files, function(file){\n          if(file.chunks.length && file.chunks[0].status()=='pending' && file.chunks[0].preprocessState === 0) {\n            file.chunks[0].send();\n            found = true;\n            return(false);\n          }\n          if(file.chunks.length>1 && file.chunks[file.chunks.length-1].status()=='pending' && file.chunks[file.chunks.length-1].preprocessState === 0) {\n            file.chunks[file.chunks.length-1].send();\n            found = true;\n            return(false);\n          }\n        });\n        if(found) return(true);\n      }\n\n      // Now, simply look for the next, best thing to upload\n      $h.each($.files, function(file){\n        if(file.isPaused()===false){\n         $h.each(file.chunks, function(chunk){\n           if(chunk.status()=='pending' && chunk.preprocessState === 0) {\n             chunk.send();\n             found = true;\n             return(false);\n           }\n          });\n        }\n        if(found) return(false);\n      });\n      if(found) return(true);\n\n      // The are no more outstanding chunks to upload, check is everything is done\n      var outstanding = false;\n      $h.each($.files, function(file){\n        if(!file.isComplete()) {\n          outstanding = true;\n          return(false);\n        }\n      });\n      if(!outstanding) {\n        // All chunks have been uploaded, complete\n        $.fire('complete');\n      }\n      return(false);\n    };\n\n\n    // PUBLIC METHODS FOR RESUMABLE.JS\n    $.assignBrowse = function(domNodes, isDirectory){\n      if(typeof(domNodes.length)=='undefined') domNodes = [domNodes];\n\n      $h.each(domNodes, function(domNode) {\n        var input;\n        if(domNode.tagName==='INPUT' && domNode.type==='file'){\n          input = domNode;\n        } else {\n          input = document.createElement('input');\n          input.setAttribute('type', 'file');\n          input.style.display = 'none';\n          domNode.addEventListener('click', function(){\n            input.style.opacity = 0;\n            input.style.display='block';\n            input.focus();\n            input.click();\n            input.style.display='none';\n          }, false);\n          domNode.appendChild(input);\n        }\n        var maxFiles = $.getOpt('maxFiles');\n        if (typeof(maxFiles)==='undefined'||maxFiles!=1){\n          input.setAttribute('multiple', 'multiple');\n        } else {\n          input.removeAttribute('multiple');\n        }\n        if(isDirectory){\n          input.setAttribute('webkitdirectory', 'webkitdirectory');\n        } else {\n          input.removeAttribute('webkitdirectory');\n        }\n        var fileTypes = $.getOpt('fileType');\n        if (typeof (fileTypes) !== 'undefined' && fileTypes.length >= 1) {\n          input.setAttribute('accept', fileTypes.map(function (e) { return '.' + e }).join(','));\n        }\n        else {\n          input.removeAttribute('accept');\n        }\n        // When new files are added, simply append them to the overall list\n        input.addEventListener('change', function(e){\n          appendFilesFromFileList(e.target.files,e);\n          var clearInput = $.getOpt('clearInput');\n          if (clearInput) {\n            e.target.value = '';\n          }\n        }, false);\n      });\n    };\n    $.assignDrop = function(domNodes){\n      if(typeof(domNodes.length)=='undefined') domNodes = [domNodes];\n\n      $h.each(domNodes, function(domNode) {\n        domNode.addEventListener('dragover', preventDefault, false);\n        domNode.addEventListener('dragenter', preventDefault, false);\n        domNode.addEventListener('drop', onDrop, false);\n      });\n    };\n    $.unAssignDrop = function(domNodes) {\n      if (typeof(domNodes.length) == 'undefined') domNodes = [domNodes];\n\n      $h.each(domNodes, function(domNode) {\n        domNode.removeEventListener('dragover', preventDefault);\n        domNode.removeEventListener('dragenter', preventDefault);\n        domNode.removeEventListener('drop', onDrop);\n      });\n    };\n    $.isUploading = function(){\n      var uploading = false;\n      $h.each($.files, function(file){\n        if (file.isUploading()) {\n          uploading = true;\n          return(false);\n        }\n      });\n      return(uploading);\n    };\n    $.upload = function(){\n      // Make sure we don't start too many uploads at once\n      if($.isUploading()) return;\n      // Kick off the queue\n      $.fire('uploadStart');\n      for (var num=1; num<=$.getOpt('simultaneousUploads'); num++) {\n        $.uploadNextChunk();\n      }\n    };\n    $.pause = function(){\n      // Resume all chunks currently being uploaded\n      $h.each($.files, function(file){\n        file.abort();\n      });\n      $.fire('pause');\n    };\n    $.cancel = function(){\n      $.fire('beforeCancel');\n      for(var i = $.files.length - 1; i >= 0; i--) {\n        $.files[i].cancel();\n      }\n      $.fire('cancel');\n    };\n    $.progress = function(){\n      var totalDone = 0;\n      var totalSize = 0;\n      // Resume all chunks currently being uploaded\n      $h.each($.files, function(file){\n        totalDone += file.progress()*file.size;\n        totalSize += file.size;\n      });\n      return(totalSize>0 ? totalDone/totalSize : 0);\n    };\n    $.addFile = function(file, event){\n      appendFilesFromFileList([file], event);\n    };\n    $.addFiles = function(files, event){\n      appendFilesFromFileList(files, event);\n    };\n    $.removeFile = function(file){\n      for(var i = $.files.length - 1; i >= 0; i--) {\n        if($.files[i] === file) {\n          $.files.splice(i, 1);\n        }\n      }\n    };\n    $.getFromUniqueIdentifier = function(uniqueIdentifier){\n      var ret = false;\n      $h.each($.files, function(f){\n        if(f.uniqueIdentifier==uniqueIdentifier) ret = f;\n      });\n      return(ret);\n    };\n    $.getSize = function(){\n      var totalSize = 0;\n      $h.each($.files, function(file){\n        totalSize += file.size;\n      });\n      return(totalSize);\n    };\n    $.handleDropEvent = function (e) {\n      onDrop(e);\n    };\n    $.handleChangeEvent = function (e) {\n      appendFilesFromFileList(e.target.files, e);\n      e.target.value = '';\n    };\n    $.updateQuery = function(query){\n        $.opts.query = query;\n    };\n\n    return(this);\n  };\n\n\n  // Node.js-style export for Node and Component\n  if (typeof module != 'undefined') {\n    module.exports = Resumable;\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD/requirejs: Define the module\n    define(function(){\n      return Resumable;\n    });\n  } else {\n    // Browser: Expose to window\n    window.Resumable = Resumable;\n  }\n\n})();\n"],
  "mappings": "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",
  "names": ["uniqueIdentifier", "$", "offset", "query"]
}
